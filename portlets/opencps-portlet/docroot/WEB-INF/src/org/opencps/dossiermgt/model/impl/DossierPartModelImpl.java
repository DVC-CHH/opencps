/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.opencps.dossiermgt.model.DossierPart;
import org.opencps.dossiermgt.model.DossierPartModel;
import org.opencps.dossiermgt.model.DossierPartSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DossierPart service. Represents a row in the &quot;opencps_dossierpart&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.opencps.dossiermgt.model.DossierPartModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierPartImpl}.
 * </p>
 *
 * @author trungnt
 * @see DossierPartImpl
 * @see org.opencps.dossiermgt.model.DossierPart
 * @see org.opencps.dossiermgt.model.DossierPartModel
 * @generated
 */
@JSON(strict = true)
public class DossierPartModelImpl extends BaseModelImpl<DossierPart>
	implements DossierPartModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier part model instance should use the {@link org.opencps.dossiermgt.model.DossierPart} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossierpart";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dossierpartId", Types.BIGINT },
			{ "dossierTemplateId", Types.BIGINT },
			{ "partNo", Types.VARCHAR },
			{ "partName", Types.VARCHAR },
			{ "partTip", Types.VARCHAR },
			{ "partType", Types.INTEGER },
			{ "parentId", Types.BIGINT },
			{ "sibling", Types.DOUBLE },
			{ "treeIndex", Types.VARCHAR },
			{ "formScript", Types.VARCHAR },
			{ "sampleData", Types.VARCHAR },
			{ "required", Types.BOOLEAN },
			{ "templateFileNo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table opencps_dossierpart (dossierpartId LONG not null primary key,dossierTemplateId LONG,partNo VARCHAR(75) null,partName VARCHAR(75) null,partTip VARCHAR(75) null,partType INTEGER,parentId LONG,sibling DOUBLE,treeIndex VARCHAR(75) null,formScript STRING null,sampleData VARCHAR(75) null,required BOOLEAN,templateFileNo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossierpart";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierPart.dossierpartId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossierpart.dossierpartId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierPart"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierPart"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DossierPart toModel(DossierPartSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DossierPart model = new DossierPartImpl();

		model.setDossierpartId(soapModel.getDossierpartId());
		model.setDossierTemplateId(soapModel.getDossierTemplateId());
		model.setPartNo(soapModel.getPartNo());
		model.setPartName(soapModel.getPartName());
		model.setPartTip(soapModel.getPartTip());
		model.setPartType(soapModel.getPartType());
		model.setParentId(soapModel.getParentId());
		model.setSibling(soapModel.getSibling());
		model.setTreeIndex(soapModel.getTreeIndex());
		model.setFormScript(soapModel.getFormScript());
		model.setSampleData(soapModel.getSampleData());
		model.setRequired(soapModel.getRequired());
		model.setTemplateFileNo(soapModel.getTemplateFileNo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DossierPart> toModels(DossierPartSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DossierPart> models = new ArrayList<DossierPart>(soapModels.length);

		for (DossierPartSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierPart"));

	public DossierPartModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierpartId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierpartId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierpartId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierPart.class;
	}

	@Override
	public String getModelClassName() {
		return DossierPart.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dossierpartId", getDossierpartId());
		attributes.put("dossierTemplateId", getDossierTemplateId());
		attributes.put("partNo", getPartNo());
		attributes.put("partName", getPartName());
		attributes.put("partTip", getPartTip());
		attributes.put("partType", getPartType());
		attributes.put("parentId", getParentId());
		attributes.put("sibling", getSibling());
		attributes.put("treeIndex", getTreeIndex());
		attributes.put("formScript", getFormScript());
		attributes.put("sampleData", getSampleData());
		attributes.put("required", getRequired());
		attributes.put("templateFileNo", getTemplateFileNo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dossierpartId = (Long)attributes.get("dossierpartId");

		if (dossierpartId != null) {
			setDossierpartId(dossierpartId);
		}

		Long dossierTemplateId = (Long)attributes.get("dossierTemplateId");

		if (dossierTemplateId != null) {
			setDossierTemplateId(dossierTemplateId);
		}

		String partNo = (String)attributes.get("partNo");

		if (partNo != null) {
			setPartNo(partNo);
		}

		String partName = (String)attributes.get("partName");

		if (partName != null) {
			setPartName(partName);
		}

		String partTip = (String)attributes.get("partTip");

		if (partTip != null) {
			setPartTip(partTip);
		}

		Integer partType = (Integer)attributes.get("partType");

		if (partType != null) {
			setPartType(partType);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		Double sibling = (Double)attributes.get("sibling");

		if (sibling != null) {
			setSibling(sibling);
		}

		String treeIndex = (String)attributes.get("treeIndex");

		if (treeIndex != null) {
			setTreeIndex(treeIndex);
		}

		String formScript = (String)attributes.get("formScript");

		if (formScript != null) {
			setFormScript(formScript);
		}

		String sampleData = (String)attributes.get("sampleData");

		if (sampleData != null) {
			setSampleData(sampleData);
		}

		Boolean required = (Boolean)attributes.get("required");

		if (required != null) {
			setRequired(required);
		}

		String templateFileNo = (String)attributes.get("templateFileNo");

		if (templateFileNo != null) {
			setTemplateFileNo(templateFileNo);
		}
	}

	@JSON
	@Override
	public long getDossierpartId() {
		return _dossierpartId;
	}

	@Override
	public void setDossierpartId(long dossierpartId) {
		_dossierpartId = dossierpartId;
	}

	@JSON
	@Override
	public long getDossierTemplateId() {
		return _dossierTemplateId;
	}

	@Override
	public void setDossierTemplateId(long dossierTemplateId) {
		_dossierTemplateId = dossierTemplateId;
	}

	@JSON
	@Override
	public String getPartNo() {
		if (_partNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _partNo;
		}
	}

	@Override
	public void setPartNo(String partNo) {
		_partNo = partNo;
	}

	@JSON
	@Override
	public String getPartName() {
		if (_partName == null) {
			return StringPool.BLANK;
		}
		else {
			return _partName;
		}
	}

	@Override
	public void setPartName(String partName) {
		_partName = partName;
	}

	@JSON
	@Override
	public String getPartTip() {
		if (_partTip == null) {
			return StringPool.BLANK;
		}
		else {
			return _partTip;
		}
	}

	@Override
	public void setPartTip(String partTip) {
		_partTip = partTip;
	}

	@JSON
	@Override
	public int getPartType() {
		return _partType;
	}

	@Override
	public void setPartType(int partType) {
		_partType = partType;
	}

	@JSON
	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@JSON
	@Override
	public double getSibling() {
		return _sibling;
	}

	@Override
	public void setSibling(double sibling) {
		_sibling = sibling;
	}

	@JSON
	@Override
	public String getTreeIndex() {
		if (_treeIndex == null) {
			return StringPool.BLANK;
		}
		else {
			return _treeIndex;
		}
	}

	@Override
	public void setTreeIndex(String treeIndex) {
		_treeIndex = treeIndex;
	}

	@JSON
	@Override
	public String getFormScript() {
		if (_formScript == null) {
			return StringPool.BLANK;
		}
		else {
			return _formScript;
		}
	}

	@Override
	public void setFormScript(String formScript) {
		_formScript = formScript;
	}

	@JSON
	@Override
	public String getSampleData() {
		if (_sampleData == null) {
			return StringPool.BLANK;
		}
		else {
			return _sampleData;
		}
	}

	@Override
	public void setSampleData(String sampleData) {
		_sampleData = sampleData;
	}

	@JSON
	@Override
	public boolean getRequired() {
		return _required;
	}

	@Override
	public boolean isRequired() {
		return _required;
	}

	@Override
	public void setRequired(boolean required) {
		_required = required;
	}

	@JSON
	@Override
	public String getTemplateFileNo() {
		if (_templateFileNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateFileNo;
		}
	}

	@Override
	public void setTemplateFileNo(String templateFileNo) {
		_templateFileNo = templateFileNo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DossierPart.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierPart toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierPart)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierPartImpl dossierPartImpl = new DossierPartImpl();

		dossierPartImpl.setDossierpartId(getDossierpartId());
		dossierPartImpl.setDossierTemplateId(getDossierTemplateId());
		dossierPartImpl.setPartNo(getPartNo());
		dossierPartImpl.setPartName(getPartName());
		dossierPartImpl.setPartTip(getPartTip());
		dossierPartImpl.setPartType(getPartType());
		dossierPartImpl.setParentId(getParentId());
		dossierPartImpl.setSibling(getSibling());
		dossierPartImpl.setTreeIndex(getTreeIndex());
		dossierPartImpl.setFormScript(getFormScript());
		dossierPartImpl.setSampleData(getSampleData());
		dossierPartImpl.setRequired(getRequired());
		dossierPartImpl.setTemplateFileNo(getTemplateFileNo());

		dossierPartImpl.resetOriginalValues();

		return dossierPartImpl;
	}

	@Override
	public int compareTo(DossierPart dossierPart) {
		long primaryKey = dossierPart.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierPart)) {
			return false;
		}

		DossierPart dossierPart = (DossierPart)obj;

		long primaryKey = dossierPart.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DossierPart> toCacheModel() {
		DossierPartCacheModel dossierPartCacheModel = new DossierPartCacheModel();

		dossierPartCacheModel.dossierpartId = getDossierpartId();

		dossierPartCacheModel.dossierTemplateId = getDossierTemplateId();

		dossierPartCacheModel.partNo = getPartNo();

		String partNo = dossierPartCacheModel.partNo;

		if ((partNo != null) && (partNo.length() == 0)) {
			dossierPartCacheModel.partNo = null;
		}

		dossierPartCacheModel.partName = getPartName();

		String partName = dossierPartCacheModel.partName;

		if ((partName != null) && (partName.length() == 0)) {
			dossierPartCacheModel.partName = null;
		}

		dossierPartCacheModel.partTip = getPartTip();

		String partTip = dossierPartCacheModel.partTip;

		if ((partTip != null) && (partTip.length() == 0)) {
			dossierPartCacheModel.partTip = null;
		}

		dossierPartCacheModel.partType = getPartType();

		dossierPartCacheModel.parentId = getParentId();

		dossierPartCacheModel.sibling = getSibling();

		dossierPartCacheModel.treeIndex = getTreeIndex();

		String treeIndex = dossierPartCacheModel.treeIndex;

		if ((treeIndex != null) && (treeIndex.length() == 0)) {
			dossierPartCacheModel.treeIndex = null;
		}

		dossierPartCacheModel.formScript = getFormScript();

		String formScript = dossierPartCacheModel.formScript;

		if ((formScript != null) && (formScript.length() == 0)) {
			dossierPartCacheModel.formScript = null;
		}

		dossierPartCacheModel.sampleData = getSampleData();

		String sampleData = dossierPartCacheModel.sampleData;

		if ((sampleData != null) && (sampleData.length() == 0)) {
			dossierPartCacheModel.sampleData = null;
		}

		dossierPartCacheModel.required = getRequired();

		dossierPartCacheModel.templateFileNo = getTemplateFileNo();

		String templateFileNo = dossierPartCacheModel.templateFileNo;

		if ((templateFileNo != null) && (templateFileNo.length() == 0)) {
			dossierPartCacheModel.templateFileNo = null;
		}

		return dossierPartCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{dossierpartId=");
		sb.append(getDossierpartId());
		sb.append(", dossierTemplateId=");
		sb.append(getDossierTemplateId());
		sb.append(", partNo=");
		sb.append(getPartNo());
		sb.append(", partName=");
		sb.append(getPartName());
		sb.append(", partTip=");
		sb.append(getPartTip());
		sb.append(", partType=");
		sb.append(getPartType());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", sibling=");
		sb.append(getSibling());
		sb.append(", treeIndex=");
		sb.append(getTreeIndex());
		sb.append(", formScript=");
		sb.append(getFormScript());
		sb.append(", sampleData=");
		sb.append(getSampleData());
		sb.append(", required=");
		sb.append(getRequired());
		sb.append(", templateFileNo=");
		sb.append(getTemplateFileNo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierPart");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dossierpartId</column-name><column-value><![CDATA[");
		sb.append(getDossierpartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierTemplateId</column-name><column-value><![CDATA[");
		sb.append(getDossierTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partNo</column-name><column-value><![CDATA[");
		sb.append(getPartNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partName</column-name><column-value><![CDATA[");
		sb.append(getPartName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partTip</column-name><column-value><![CDATA[");
		sb.append(getPartTip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partType</column-name><column-value><![CDATA[");
		sb.append(getPartType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sibling</column-name><column-value><![CDATA[");
		sb.append(getSibling());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>treeIndex</column-name><column-value><![CDATA[");
		sb.append(getTreeIndex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formScript</column-name><column-value><![CDATA[");
		sb.append(getFormScript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sampleData</column-name><column-value><![CDATA[");
		sb.append(getSampleData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>required</column-name><column-value><![CDATA[");
		sb.append(getRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateFileNo</column-name><column-value><![CDATA[");
		sb.append(getTemplateFileNo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DossierPart.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierPart.class
		};
	private long _dossierpartId;
	private long _dossierTemplateId;
	private String _partNo;
	private String _partName;
	private String _partTip;
	private int _partType;
	private long _parentId;
	private double _sibling;
	private String _treeIndex;
	private String _formScript;
	private String _sampleData;
	private boolean _required;
	private String _templateFileNo;
	private DossierPart _escapedModel;
}